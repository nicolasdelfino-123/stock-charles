{"ast":null,"code":"var _jsxFileName = \"/home/nico/Escritorio/STOCK/stock-charles/frontend/src/context/appContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from \"react\";\n\n// Creamos el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\n// Proveedor del contexto\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // Estado global (store)\n  const [libros, setLibros] = useState([]);\n  const [mensaje, setMensaje] = useState(\"\");\n\n  // Cargar libros al iniciar\n  useEffect(() => {\n    actions.fetchLibros();\n  }, []);\n\n  // Acciones (actions)\n  const store = {\n    libros,\n    mensaje\n  };\n  const actions = {\n    // Cargar todos los libros\n    fetchLibros: async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\");\n        if (response.ok) {\n          const data = await response.json();\n          setLibros(data);\n        }\n      } catch (error) {\n        console.error(\"Error al cargar libros:\", error);\n      }\n    },\n    // Buscar libro por ISBN\n    buscarLibroPorISBN: async isbn => {\n      if (!isbn) return null;\n      try {\n        const response = await fetch(`http://localhost:5000/libros?isbn=${isbn}`);\n        const data = await response.json();\n        if (response.ok && data.length > 0) {\n          return data[0];\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro por ISBN:\", error);\n        return null;\n      }\n    },\n    // Actualizar libro existente\n    actualizarLibro: async (id, formData) => {\n      try {\n        const response = await fetch(`http://localhost:5000/libros/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true\n          };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: false,\n            error: errorData.error || \"Error al actualizar libro\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de actualización:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    // Crear nuevo libro\n    crearLibro: async formData => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true\n          };\n        } else {\n          const data = await response.json();\n          return {\n            success: false,\n            error: data.error || \"Error al crear libro\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de creación:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    // Establecer mensaje\n    setMensaje: msg => {\n      setMensaje(msg);\n    },\n    // Bajar stock de libro\n    bajarStockLibro: async (id, cantidad) => {\n      try {\n        const response = await fetch(`http://localhost:5000/bajar-libro/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            cantidad\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true,\n            ubicacion: data.ubicacion || \"\"\n          };\n        } else {\n          return {\n            success: false,\n            error: data.error || \"Error al bajar el stock\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    // Buscar libro por ISBN en API externa (Open Library)\n    buscarLibroExterno: async isbn => {\n      if (!isbn) return null;\n      try {\n        // Limpiamos el ISBN de guiones o espacios\n        const isbnLimpio = isbn.replace(/-|\\s/g, \"\");\n\n        // Consultamos la API de Open Library\n        const response = await fetch(`https://openlibrary.org/api/books?bibkeys=ISBN:${isbnLimpio}&format=json&jscmd=data`);\n        if (!response.ok) {\n          throw new Error(\"Error al consultar la API externa\");\n        }\n        const data = await response.json();\n        const libroKey = `ISBN:${isbnLimpio}`;\n\n        // Si encontramos el libro\n        if (data[libroKey]) {\n          const libroInfo = data[libroKey];\n\n          // Extraemos la información relevante\n          const titulo = libroInfo.title || \"\";\n\n          // Extraemos autores (puede haber varios)\n          let autores = \"\";\n          if (libroInfo.authors && libroInfo.authors.length > 0) {\n            autores = libroInfo.authors.map(autor => autor.name).join(\", \");\n          }\n\n          // Extraemos editorial si está disponible\n          const editorial = libroInfo.publishers && libroInfo.publishers.length > 0 ? libroInfo.publishers[0].name : \"\";\n          return {\n            titulo,\n            autor: autores,\n            editorial\n            // La API no proporciona stock, así que eso lo mantenemos en tu base de datos\n          };\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro en API externa:\", error);\n        return null;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      store,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para facilitar el uso del contexto\n_s(AppProvider, \"z0knvvbbS6PEZK11tSJ6rQHbinU=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","libros","setLibros","mensaje","setMensaje","actions","fetchLibros","store","response","fetch","ok","data","json","error","console","buscarLibroPorISBN","isbn","length","actualizarLibro","id","formData","method","headers","body","JSON","stringify","success","errorData","message","crearLibro","msg","bajarStockLibro","cantidad","ubicacion","buscarLibroExterno","isbnLimpio","replace","Error","libroKey","libroInfo","titulo","title","autores","authors","map","autor","name","join","editorial","publishers","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","$RefreshReg$"],"sources":["/home/nico/Escritorio/STOCK/stock-charles/frontend/src/context/appContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from \"react\";\n\n// Creamos el contexto\nexport const AppContext = createContext();\n\n// Proveedor del contexto\nexport const AppProvider = ({ children }) => {\n  // Estado global (store)\n  const [libros, setLibros] = useState([]);\n  const [mensaje, setMensaje] = useState(\"\");\n\n  // Cargar libros al iniciar\n  useEffect(() => {\n    actions.fetchLibros();\n  }, []);\n\n  // Acciones (actions)\n  const store = {\n    libros,\n    mensaje,\n  };\n\n  const actions = {\n    // Cargar todos los libros\n    fetchLibros: async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\");\n        if (response.ok) {\n          const data = await response.json();\n          setLibros(data);\n        }\n      } catch (error) {\n        console.error(\"Error al cargar libros:\", error);\n      }\n    },\n\n    // Buscar libro por ISBN\n    buscarLibroPorISBN: async (isbn) => {\n      if (!isbn) return null;\n\n      try {\n        const response = await fetch(\n          `http://localhost:5000/libros?isbn=${isbn}`\n        );\n        const data = await response.json();\n\n        if (response.ok && data.length > 0) {\n          return data[0];\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro por ISBN:\", error);\n        return null;\n      }\n    },\n\n    // Actualizar libro existente\n    actualizarLibro: async (id, formData) => {\n      try {\n        const response = await fetch(`http://localhost:5000/libros/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        });\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return { success: true };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: false,\n            error: errorData.error || \"Error al actualizar libro\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de actualización:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n\n    // Crear nuevo libro\n    crearLibro: async (formData) => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        });\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return { success: true };\n        } else {\n          const data = await response.json();\n          return {\n            success: false,\n            error: data.error || \"Error al crear libro\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de creación:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n\n    // Establecer mensaje\n    setMensaje: (msg) => {\n      setMensaje(msg);\n    },\n    // Bajar stock de libro\n    bajarStockLibro: async (id, cantidad) => {\n      try {\n        const response = await fetch(\n          `http://localhost:5000/bajar-libro/${id}`,\n          {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ cantidad }),\n          }\n        );\n\n        const data = await response.json();\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true,\n            ubicacion: data.ubicacion || \"\",\n          };\n        } else {\n          return {\n            success: false,\n            error: data.error || \"Error al bajar el stock\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n\n    // Buscar libro por ISBN en API externa (Open Library)\n    buscarLibroExterno: async (isbn) => {\n      if (!isbn) return null;\n\n      try {\n        // Limpiamos el ISBN de guiones o espacios\n        const isbnLimpio = isbn.replace(/-|\\s/g, \"\");\n\n        // Consultamos la API de Open Library\n        const response = await fetch(\n          `https://openlibrary.org/api/books?bibkeys=ISBN:${isbnLimpio}&format=json&jscmd=data`\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Error al consultar la API externa\");\n        }\n\n        const data = await response.json();\n        const libroKey = `ISBN:${isbnLimpio}`;\n\n        // Si encontramos el libro\n        if (data[libroKey]) {\n          const libroInfo = data[libroKey];\n\n          // Extraemos la información relevante\n          const titulo = libroInfo.title || \"\";\n\n          // Extraemos autores (puede haber varios)\n          let autores = \"\";\n          if (libroInfo.authors && libroInfo.authors.length > 0) {\n            autores = libroInfo.authors.map((autor) => autor.name).join(\", \");\n          }\n\n          // Extraemos editorial si está disponible\n          const editorial =\n            libroInfo.publishers && libroInfo.publishers.length > 0\n              ? libroInfo.publishers[0].name\n              : \"\";\n\n          return {\n            titulo,\n            autor: autores,\n            editorial,\n            // La API no proporciona stock, así que eso lo mantenemos en tu base de datos\n          };\n        }\n\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro en API externa:\", error);\n        return null;\n      }\n    },\n  };\n\n  return (\n    <AppContext.Provider value={{ store, actions }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Hook personalizado para facilitar el uso del contexto\nexport const useAppContext = () => useContext(AppContext);\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAEtE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,UAAU,gBAAGN,aAAa,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAMO,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAE,SAAS,CAAC,MAAM;IACdW,OAAO,CAACC,WAAW,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,KAAK,GAAG;IACZN,MAAM;IACNE;EACF,CAAC;EAED,MAAME,OAAO,GAAG;IACd;IACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;MACvB,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAC5D,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCV,SAAS,CAACS,IAAI,CAAC;QACjB;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED;IACAE,kBAAkB,EAAE,MAAOC,IAAI,IAAK;MAClC,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;MAEtB,IAAI;QACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAC1B,qCAAqCO,IAAI,EAC3C,CAAC;QACD,MAAML,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAElC,IAAIJ,QAAQ,CAACE,EAAE,IAAIC,IAAI,CAACM,MAAM,GAAG,CAAC,EAAE;UAClC,OAAON,IAAI,CAAC,CAAC,CAAC;QAChB;QACA,OAAO,IAAI;MACb,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,OAAO,IAAI;MACb;IACF,CAAC;IAED;IACAK,eAAe,EAAE,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;MACvC,IAAI;QACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgCU,EAAE,EAAE,EAAE;UACjEE,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;QAC/B,CAAC,CAAC;QAEF,IAAIZ,QAAQ,CAACE,EAAE,EAAE;UACf;UACAL,OAAO,CAACC,WAAW,CAAC,CAAC;UACrB,OAAO;YAAEoB,OAAO,EAAE;UAAK,CAAC;QAC1B,CAAC,MAAM;UACL,MAAMC,SAAS,GAAG,MAAMnB,QAAQ,CAACI,IAAI,CAAC,CAAC;UACvC,OAAO;YACLc,OAAO,EAAE,KAAK;YACdb,KAAK,EAAEc,SAAS,CAACd,KAAK,IAAI;UAC5B,CAAC;QACH;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/D,OAAO;UAAEa,OAAO,EAAE,KAAK;UAAEb,KAAK,EAAEA,KAAK,CAACe;QAAQ,CAAC;MACjD;IACF,CAAC;IAED;IACAC,UAAU,EAAE,MAAOT,QAAQ,IAAK;MAC9B,IAAI;QACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;UAC3DY,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;QAC/B,CAAC,CAAC;QAEF,IAAIZ,QAAQ,CAACE,EAAE,EAAE;UACf;UACAL,OAAO,CAACC,WAAW,CAAC,CAAC;UACrB,OAAO;YAAEoB,OAAO,EAAE;UAAK,CAAC;QAC1B,CAAC,MAAM;UACL,MAAMf,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClC,OAAO;YACLc,OAAO,EAAE,KAAK;YACdb,KAAK,EAAEF,IAAI,CAACE,KAAK,IAAI;UACvB,CAAC;QACH;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1D,OAAO;UAAEa,OAAO,EAAE,KAAK;UAAEb,KAAK,EAAEA,KAAK,CAACe;QAAQ,CAAC;MACjD;IACF,CAAC;IAED;IACAxB,UAAU,EAAG0B,GAAG,IAAK;MACnB1B,UAAU,CAAC0B,GAAG,CAAC;IACjB,CAAC;IACD;IACAC,eAAe,EAAE,MAAAA,CAAOZ,EAAE,EAAEa,QAAQ,KAAK;MACvC,IAAI;QACF,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,qCAAqCU,EAAE,EAAE,EACzC;UACEE,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEO;UAAS,CAAC;QACnC,CACF,CAAC;QAED,MAAMrB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAElC,IAAIJ,QAAQ,CAACE,EAAE,EAAE;UACf;UACAL,OAAO,CAACC,WAAW,CAAC,CAAC;UACrB,OAAO;YACLoB,OAAO,EAAE,IAAI;YACbO,SAAS,EAAEtB,IAAI,CAACsB,SAAS,IAAI;UAC/B,CAAC;QACH,CAAC,MAAM;UACL,OAAO;YACLP,OAAO,EAAE,KAAK;YACdb,KAAK,EAAEF,IAAI,CAACE,KAAK,IAAI;UACvB,CAAC;QACH;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,OAAO;UAAEa,OAAO,EAAE,KAAK;UAAEb,KAAK,EAAEA,KAAK,CAACe;QAAQ,CAAC;MACjD;IACF,CAAC;IAED;IACAM,kBAAkB,EAAE,MAAOlB,IAAI,IAAK;MAClC,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;MAEtB,IAAI;QACF;QACA,MAAMmB,UAAU,GAAGnB,IAAI,CAACoB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;;QAE5C;QACA,MAAM5B,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD0B,UAAU,yBAC9D,CAAC;QAED,IAAI,CAAC3B,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAI2B,KAAK,CAAC,mCAAmC,CAAC;QACtD;QAEA,MAAM1B,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,MAAM0B,QAAQ,GAAG,QAAQH,UAAU,EAAE;;QAErC;QACA,IAAIxB,IAAI,CAAC2B,QAAQ,CAAC,EAAE;UAClB,MAAMC,SAAS,GAAG5B,IAAI,CAAC2B,QAAQ,CAAC;;UAEhC;UACA,MAAME,MAAM,GAAGD,SAAS,CAACE,KAAK,IAAI,EAAE;;UAEpC;UACA,IAAIC,OAAO,GAAG,EAAE;UAChB,IAAIH,SAAS,CAACI,OAAO,IAAIJ,SAAS,CAACI,OAAO,CAAC1B,MAAM,GAAG,CAAC,EAAE;YACrDyB,OAAO,GAAGH,SAAS,CAACI,OAAO,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;UACnE;;UAEA;UACA,MAAMC,SAAS,GACbT,SAAS,CAACU,UAAU,IAAIV,SAAS,CAACU,UAAU,CAAChC,MAAM,GAAG,CAAC,GACnDsB,SAAS,CAACU,UAAU,CAAC,CAAC,CAAC,CAACH,IAAI,GAC5B,EAAE;UAER,OAAO;YACLN,MAAM;YACNK,KAAK,EAAEH,OAAO;YACdM;YACA;UACF,CAAC;QACH;QAEA,OAAO,IAAI;MACb,CAAC,CAAC,OAAOnC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QAC7D,OAAO,IAAI;MACb;IACF;EACF,CAAC;EAED,oBACEjB,OAAA,CAACC,UAAU,CAACqD,QAAQ;IAACC,KAAK,EAAE;MAAE5C,KAAK;MAAEF;IAAQ,CAAE;IAAAN,QAAA,EAC5CA;EAAQ;IAAAqD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;;AAED;AAAAvD,EAAA,CA/MaF,WAAW;AAAA0D,EAAA,GAAX1D,WAAW;AAgNxB,OAAO,MAAM2D,aAAa,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMjE,UAAU,CAACI,UAAU,CAAC;AAAA;AAAC6D,GAAA,CAA7CD,aAAa;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}