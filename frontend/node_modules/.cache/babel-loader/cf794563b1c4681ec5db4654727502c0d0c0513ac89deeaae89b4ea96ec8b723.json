{"ast":null,"code":"var _jsxFileName = \"/home/nico/Escritorio/STOCK/stock-charles/frontend/src/context/appContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [libros, setLibros] = useState([]);\n  const [mensaje, setMensaje] = useState(\"\");\n  useEffect(() => {\n    actions.fetchLibros();\n  }, []);\n  const store = {\n    libros,\n    mensaje\n  };\n  const actions = {\n    // Cargar todos los libros\n    fetchLibros: async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\");\n        if (response.ok) {\n          const data = await response.json();\n          setLibros(data);\n        }\n      } catch (error) {\n        console.error(\"Error al cargar libros:\", error);\n      }\n    },\n    // Buscar libro por ISBN\n    buscarLibroPorISBN: async isbn => {\n      if (!isbn) return null;\n      try {\n        const response = await fetch(`http://localhost:5000/libros?isbn=${isbn}`);\n        const data = await response.json();\n        if (response.ok && data.length > 0) {\n          return data[0];\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro por ISBN:\", error);\n        return null;\n      }\n    },\n    // Actualizar libro existente\n    actualizarLibro: async (id, formData) => {\n      try {\n        const response = await fetch(`http://localhost:5000/libros/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true\n          };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: false,\n            error: errorData.error || \"Error al actualizar libro\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de actualización:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    // Crear nuevo libro\n    crearLibro: async formData => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true\n          };\n        } else {\n          const data = await response.json();\n          return {\n            success: false,\n            error: data.error || \"Error al crear libro\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de creación:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    // Establecer mensaje\n    setMensaje: msg => {\n      setMensaje(msg);\n    },\n    // Bajar stock de libro\n    bajarStockLibro: async (id, cantidad) => {\n      try {\n        const response = await fetch(`http://localhost:5000/bajar-libro/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            cantidad\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true,\n            ubicacion: data.ubicacion || \"\"\n          };\n        } else {\n          return {\n            success: false,\n            error: data.error || \"Error al bajar el stock\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    buscarEnLibrerias: async isbn => {\n      try {\n        const fuentes = [\"cuspide\", \"santafe\", \"tematika\"];\n        const resultados = [];\n        for (let fuente of fuentes) {\n          const res = await fetch(`http://localhost:5001/api/${fuente}/${isbn}`);\n          if (res.ok) {\n            const data = await res.json();\n            resultados.push(data);\n          }\n        }\n        return resultados; // Un array con los resultados de cada librería\n      } catch (error) {\n        console.error(\"Error al buscar en librerías:\", error);\n        return [];\n      }\n    },\n    // Función para buscar libro en fuentes externas (scraping)\n    buscarLibroExterno: async isbn => {\n      const isbnLimpio = isbn.replace(/-/g, \"\");\n      console.log(\"BUSCANDO LIBRO EXTERNO CON ISBN:\", isbnLimpio);\n      try {\n        // 1. Primero intentamos con el scraping de librerías argentinas\n        console.log(\"INTENTANDO CON LIBRERÍAS ARGENTINAS...\");\n        const resultadoLocal = await buscarEnLibreriasArgentinas(isbnLimpio);\n        if (resultadoLocal && !resultadoLocal.error) {\n          console.log(\"DATOS OBTENIDOS DE:\", resultadoLocal.fuente, resultadoLocal);\n          return resultadoLocal;\n        }\n\n        // 2. Si no funciona, probamos con Google Books como respaldo\n        console.log(\"INTENTANDO CON GOOGLE BOOKS...\");\n        const googleResponse = await fetch(`https://www.googleapis.com/books/v1/volumes?q=isbn:${isbnLimpio}`);\n        const googleData = await googleResponse.json();\n        if (googleData.items && googleData.items.length > 0) {\n          var _libro$saleInfo, _libro$saleInfo$listP;\n          const libro = googleData.items[0].volumeInfo;\n          console.log(\"DATOS OBTENIDOS DE GOOGLE BOOKS:\", libro);\n          return {\n            titulo: libro.title || \"\",\n            autor: libro.authors ? libro.authors.join(\", \") : \"Desconocido\",\n            editorial: libro.publisher || \"Desconocida\",\n            precio: ((_libro$saleInfo = libro.saleInfo) === null || _libro$saleInfo === void 0 ? void 0 : (_libro$saleInfo$listP = _libro$saleInfo.listPrice) === null || _libro$saleInfo$listP === void 0 ? void 0 : _libro$saleInfo$listP.amount) || 0,\n            fuente: \"Google Books\"\n          };\n        }\n        console.log(\"NO SE ENCONTRÓ EL LIBRO EN NINGUNA FUENTE\");\n        return null;\n      } catch (error) {\n        console.error(\"ERROR AL BUSCAR LIBRO EXTERNO:\", error.message);\n        return null;\n      }\n    }\n\n    // ... (mantener el resto de tus funciones)\n  };\n\n  // Función para buscar en librerías argentinas usando nuestro backend\n  const buscarEnLibreriasArgentinas = async isbn => {\n    try {\n      // Intentamos en paralelo para mayor velocidad\n      const [cuspide, santafe, tematika] = await Promise.allSettled([buscarEnCuspide(isbn), buscarEnSantaFe(isbn), buscarEnTematika(isbn)]);\n\n      // Devolvemos el primer resultado exitoso\n      if (cuspide.status === \"fulfilled\" && cuspide.value) {\n        console.log(\"DATOS TRAIDOS DE CUSPIDE:\", cuspide.value);\n        return cuspide.value;\n      }\n      if (santafe.status === \"fulfilled\" && santafe.value) {\n        console.log(\"DATOS TRAIDOS DE SANTAFE:\", santafe.value);\n        return santafe.value;\n      }\n      if (tematika.status === \"fulfilled\" && tematika.value) {\n        console.log(\"DATOS TRAIDOS DE TEMATIKA:\", tematika.value);\n        return tematika.value;\n      }\n      return null;\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN LIBRERÍAS ARGENTINAS:\", error);\n      return null;\n    }\n  };\n\n  // Funciones para buscar en cada librería usando nuestro backend\n  const buscarEnCuspide = async isbn => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/cuspide/${isbn}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN CÚSPIDE:\", error);\n      return null;\n    }\n  };\n  const buscarEnSantaFe = async isbn => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/santafe/${isbn}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN SANTA FE:\", error);\n      return null;\n    }\n  };\n  const buscarEnTematika = async isbn => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/tematika/${isbn}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN TEMATIKA:\", error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      store,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"z0knvvbbS6PEZK11tSJ6rQHbinU=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","libros","setLibros","mensaje","setMensaje","actions","fetchLibros","store","response","fetch","ok","data","json","error","console","buscarLibroPorISBN","isbn","length","actualizarLibro","id","formData","method","headers","body","JSON","stringify","success","errorData","message","crearLibro","msg","bajarStockLibro","cantidad","ubicacion","buscarEnLibrerias","fuentes","resultados","fuente","res","push","buscarLibroExterno","isbnLimpio","replace","log","resultadoLocal","buscarEnLibreriasArgentinas","googleResponse","googleData","items","_libro$saleInfo","_libro$saleInfo$listP","libro","volumeInfo","titulo","title","autor","authors","join","editorial","publisher","precio","saleInfo","listPrice","amount","cuspide","santafe","tematika","Promise","allSettled","buscarEnCuspide","buscarEnSantaFe","buscarEnTematika","status","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","$RefreshReg$"],"sources":["/home/nico/Escritorio/STOCK/stock-charles/frontend/src/context/appContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from \"react\";\n\nexport const AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  const [libros, setLibros] = useState([]);\n  const [mensaje, setMensaje] = useState(\"\");\n\n  useEffect(() => {\n    actions.fetchLibros();\n  }, []);\n\n  const store = {\n    libros,\n    mensaje,\n  };\n\n  const actions = {\n    // Cargar todos los libros\n    fetchLibros: async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\");\n        if (response.ok) {\n          const data = await response.json();\n          setLibros(data);\n        }\n      } catch (error) {\n        console.error(\"Error al cargar libros:\", error);\n      }\n    },\n\n    // Buscar libro por ISBN\n    buscarLibroPorISBN: async (isbn) => {\n      if (!isbn) return null;\n\n      try {\n        const response = await fetch(\n          `http://localhost:5000/libros?isbn=${isbn}`\n        );\n        const data = await response.json();\n\n        if (response.ok && data.length > 0) {\n          return data[0];\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro por ISBN:\", error);\n        return null;\n      }\n    },\n\n    // Actualizar libro existente\n    actualizarLibro: async (id, formData) => {\n      try {\n        const response = await fetch(`http://localhost:5000/libros/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        });\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return { success: true };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: false,\n            error: errorData.error || \"Error al actualizar libro\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de actualización:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n\n    // Crear nuevo libro\n    crearLibro: async (formData) => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        });\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return { success: true };\n        } else {\n          const data = await response.json();\n          return {\n            success: false,\n            error: data.error || \"Error al crear libro\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de creación:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n\n    // Establecer mensaje\n    setMensaje: (msg) => {\n      setMensaje(msg);\n    },\n\n    // Bajar stock de libro\n    bajarStockLibro: async (id, cantidad) => {\n      try {\n        const response = await fetch(\n          `http://localhost:5000/bajar-libro/${id}`,\n          {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ cantidad }),\n          }\n        );\n\n        const data = await response.json();\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true,\n            ubicacion: data.ubicacion || \"\",\n          };\n        } else {\n          return {\n            success: false,\n            error: data.error || \"Error al bajar el stock\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n    buscarEnLibrerias: async (isbn) => {\n      try {\n        const fuentes = [\"cuspide\", \"santafe\", \"tematika\"];\n        const resultados = [];\n\n        for (let fuente of fuentes) {\n          const res = await fetch(\n            `http://localhost:5001/api/${fuente}/${isbn}`\n          );\n          if (res.ok) {\n            const data = await res.json();\n            resultados.push(data);\n          }\n        }\n\n        return resultados; // Un array con los resultados de cada librería\n      } catch (error) {\n        console.error(\"Error al buscar en librerías:\", error);\n        return [];\n      }\n    },\n\n    // Función para buscar libro en fuentes externas (scraping)\n    buscarLibroExterno: async (isbn) => {\n      const isbnLimpio = isbn.replace(/-/g, \"\");\n      console.log(\"BUSCANDO LIBRO EXTERNO CON ISBN:\", isbnLimpio);\n\n      try {\n        // 1. Primero intentamos con el scraping de librerías argentinas\n        console.log(\"INTENTANDO CON LIBRERÍAS ARGENTINAS...\");\n        const resultadoLocal = await buscarEnLibreriasArgentinas(isbnLimpio);\n\n        if (resultadoLocal && !resultadoLocal.error) {\n          console.log(\n            \"DATOS OBTENIDOS DE:\",\n            resultadoLocal.fuente,\n            resultadoLocal\n          );\n          return resultadoLocal;\n        }\n\n        // 2. Si no funciona, probamos con Google Books como respaldo\n        console.log(\"INTENTANDO CON GOOGLE BOOKS...\");\n        const googleResponse = await fetch(\n          `https://www.googleapis.com/books/v1/volumes?q=isbn:${isbnLimpio}`\n        );\n        const googleData = await googleResponse.json();\n\n        if (googleData.items && googleData.items.length > 0) {\n          const libro = googleData.items[0].volumeInfo;\n          console.log(\"DATOS OBTENIDOS DE GOOGLE BOOKS:\", libro);\n          return {\n            titulo: libro.title || \"\",\n            autor: libro.authors ? libro.authors.join(\", \") : \"Desconocido\",\n            editorial: libro.publisher || \"Desconocida\",\n            precio: libro.saleInfo?.listPrice?.amount || 0,\n            fuente: \"Google Books\",\n          };\n        }\n\n        console.log(\"NO SE ENCONTRÓ EL LIBRO EN NINGUNA FUENTE\");\n        return null;\n      } catch (error) {\n        console.error(\"ERROR AL BUSCAR LIBRO EXTERNO:\", error.message);\n        return null;\n      }\n    },\n\n    // ... (mantener el resto de tus funciones)\n  };\n\n  // Función para buscar en librerías argentinas usando nuestro backend\n  const buscarEnLibreriasArgentinas = async (isbn) => {\n    try {\n      // Intentamos en paralelo para mayor velocidad\n      const [cuspide, santafe, tematika] = await Promise.allSettled([\n        buscarEnCuspide(isbn),\n        buscarEnSantaFe(isbn),\n        buscarEnTematika(isbn),\n      ]);\n\n      // Devolvemos el primer resultado exitoso\n      if (cuspide.status === \"fulfilled\" && cuspide.value) {\n        console.log(\"DATOS TRAIDOS DE CUSPIDE:\", cuspide.value);\n        return cuspide.value;\n      }\n      if (santafe.status === \"fulfilled\" && santafe.value) {\n        console.log(\"DATOS TRAIDOS DE SANTAFE:\", santafe.value);\n        return santafe.value;\n      }\n      if (tematika.status === \"fulfilled\" && tematika.value) {\n        console.log(\"DATOS TRAIDOS DE TEMATIKA:\", tematika.value);\n        return tematika.value;\n      }\n\n      return null;\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN LIBRERÍAS ARGENTINAS:\", error);\n      return null;\n    }\n  };\n\n  // Funciones para buscar en cada librería usando nuestro backend\n  const buscarEnCuspide = async (isbn) => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/cuspide/${isbn}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN CÚSPIDE:\", error);\n      return null;\n    }\n  };\n\n  const buscarEnSantaFe = async (isbn) => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/santafe/${isbn}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN SANTA FE:\", error);\n      return null;\n    }\n  };\n\n  const buscarEnTematika = async (isbn) => {\n    try {\n      const response = await fetch(\n        `http://localhost:5001/api/tematika/${isbn}`\n      );\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error(\"ERROR AL BUSCAR EN TEMATIKA:\", error);\n      return null;\n    }\n  };\n\n  return (\n    <AppContext.Provider value={{ store, actions }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = () => useContext(AppContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}