{"ast":null,"code":"var _jsxFileName = \"/home/nico/Escritorio/STOCK/stock-charles/frontend/src/context/appContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext, useEffect } from \"react\";\n\n// Creamos el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\n// Proveedor del contexto\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // Estado global (store)\n  const [libros, setLibros] = useState([]);\n  const [mensaje, setMensaje] = useState(\"\");\n\n  // Cargar libros al iniciar\n  useEffect(() => {\n    fetchLibros();\n  }, []);\n\n  // Acciones (actions)\n  const store = {\n    libros,\n    mensaje\n  };\n  const actions = {\n    // Cargar todos los libros\n    fetchLibros: async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\");\n        if (response.ok) {\n          const data = await response.json();\n          setLibros(data);\n        }\n      } catch (error) {\n        console.error(\"Error al cargar libros:\", error);\n      }\n    },\n    // Buscar libro por ISBN\n    buscarLibroPorISBN: async isbn => {\n      if (!isbn) return null;\n      try {\n        const response = await fetch(`http://localhost:5000/libros?isbn=${isbn}`);\n        const data = await response.json();\n        if (response.ok && data.length > 0) {\n          return data[0];\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro por ISBN:\", error);\n        return null;\n      }\n    },\n    // Actualizar libro existente\n    actualizarLibro: async (id, formData) => {\n      try {\n        const response = await fetch(`http://localhost:5000/libros/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true\n          };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: false,\n            error: errorData.error || \"Error al actualizar libro\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de actualizaci贸n:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    // Crear nuevo libro\n    crearLibro: async formData => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return {\n            success: true\n          };\n        } else {\n          const data = await response.json();\n          return {\n            success: false,\n            error: data.error || \"Error al crear libro\"\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de creaci贸n:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    },\n    // Establecer mensaje\n    setMensaje: msg => {\n      setMensaje(msg);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      store,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para facilitar el uso del contexto\n_s(AppProvider, \"z0knvvbbS6PEZK11tSJ6rQHbinU=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  return useContext(AppContext);\n};\n_s2(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","libros","setLibros","mensaje","setMensaje","fetchLibros","store","actions","response","fetch","ok","data","json","error","console","buscarLibroPorISBN","isbn","length","actualizarLibro","id","formData","method","headers","body","JSON","stringify","success","errorData","message","crearLibro","msg","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","$RefreshReg$"],"sources":["/home/nico/Escritorio/STOCK/stock-charles/frontend/src/context/appContext.js"],"sourcesContent":["import { createContext, useState, useContext, useEffect } from \"react\";\n\n// Creamos el contexto\nexport const AppContext = createContext();\n\n// Proveedor del contexto\nexport const AppProvider = ({ children }) => {\n  // Estado global (store)\n  const [libros, setLibros] = useState([]);\n  const [mensaje, setMensaje] = useState(\"\");\n\n  // Cargar libros al iniciar\n  useEffect(() => {\n    fetchLibros();\n  }, []);\n\n  // Acciones (actions)\n  const store = {\n    libros,\n    mensaje,\n  };\n\n  const actions = {\n    // Cargar todos los libros\n    fetchLibros: async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\");\n        if (response.ok) {\n          const data = await response.json();\n          setLibros(data);\n        }\n      } catch (error) {\n        console.error(\"Error al cargar libros:\", error);\n      }\n    },\n\n    // Buscar libro por ISBN\n    buscarLibroPorISBN: async (isbn) => {\n      if (!isbn) return null;\n\n      try {\n        const response = await fetch(\n          `http://localhost:5000/libros?isbn=${isbn}`\n        );\n        const data = await response.json();\n\n        if (response.ok && data.length > 0) {\n          return data[0];\n        }\n        return null;\n      } catch (error) {\n        console.error(\"Error al buscar libro por ISBN:\", error);\n        return null;\n      }\n    },\n\n    // Actualizar libro existente\n    actualizarLibro: async (id, formData) => {\n      try {\n        const response = await fetch(`http://localhost:5000/libros/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        });\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return { success: true };\n        } else {\n          const errorData = await response.json();\n          return {\n            success: false,\n            error: errorData.error || \"Error al actualizar libro\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de actualizaci贸n:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n\n    // Crear nuevo libro\n    crearLibro: async (formData) => {\n      try {\n        const response = await fetch(\"http://localhost:5000/libros\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        });\n\n        if (response.ok) {\n          // Actualizar la lista de libros\n          actions.fetchLibros();\n          return { success: true };\n        } else {\n          const data = await response.json();\n          return {\n            success: false,\n            error: data.error || \"Error al crear libro\",\n          };\n        }\n      } catch (error) {\n        console.error(\"Error en la solicitud de creaci贸n:\", error);\n        return { success: false, error: error.message };\n      }\n    },\n\n    // Establecer mensaje\n    setMensaje: (msg) => {\n      setMensaje(msg);\n    },\n  };\n\n  return (\n    <AppContext.Provider value={{ store, actions }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Hook personalizado para facilitar el uso del contexto\nexport const useAppContext = () => useContext(AppContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}